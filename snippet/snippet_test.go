package snippet_test

import (
	"bytes"
	"context"
	"database/sql/driver"
	_ "embed"
	"go/types"
	"io"
	"os"
	"path/filepath"
	"reflect"

	"github.com/pkg/errors"
	"github.com/xoctopus/enumx"
	"github.com/xoctopus/x/ptrx"
	_ "github.com/xoctopus/x/ptrx"

	"github.com/xoctopus/genx/internal/dumper"
	. "github.com/xoctopus/genx/snippet"
	"github.com/xoctopus/genx/testdata"
)

func Print(ctx context.Context, ss ...Snippet) {
	Write(ctx, os.Stdout, ss...)
}

func Write(ctx context.Context, w io.Writer, ss ...Snippet) {
	for _, s := range ss {
		if !s.IsNil() {
			for line := range s.Fragments(ctx) {
				_, _ = w.Write([]byte(line))
			}
		}
	}
}

func ExampleComments() {
	Print(
		context.Background(),
		Snippets(
			NewLine(1),
			Document("TypeName", "this is a document for TypeName.", " line1\n line2\n line3"),
			Comments("\n", ""), // empty skipped
			InlineComment("this is an inline comment"),
			Directive("generate", "arg1", "\n", "arg2", "\t", "--flag"),
		),
	)

	// Output:
	// // TypeName this is a document for TypeName.
	// // line1
	// // line2
	// // line3
	// // this is an inline comment
	// //go:generate arg1 arg2 --flag
}

func ExampleBlock() {
	x := 1
	Print(
		context.Background(),
		Document("F", "this is a document for F."),
		NewLine(1),
		Block("func F() int {"),
		NewLine(1),
		Indent(1), BlockF("x := %d", x),
		NewLine(1),
		Indent(1), Block("return x"),
		NewLine(1),
		Block("}"), NewLine(1),
	)

	// Output:
	// // F this is a document for F.
	// func F() int {
	// 	x := 1
	// 	return x
	// }
	//
}

func ExampleIdentFor() {
	ctx := dumper.WithTrackerContext(context.Background(), "demo")

	body := Snippets(
		NewLine(1),
		IdentFor[string](ctx),
		IdentOf(ctx, bytes.Reader{}),
		IdentFor[bytes.Reader](ctx),
		IdentFor[*bytes.Buffer](ctx),
		IdentFor[io.Reader](ctx),
		IdentFor[dumper.Import](ctx),
		IdentRT(ctx, reflect.TypeOf(3.2)),
		IdentTT(ctx, types.Typ[types.Int32]),
	)

	Print(
		ctx,
		Poster("demo", "genx:test_ident"),
		Imports(ctx, ""),
		body,
	)

	// Output:
	// // Package demo GENERATED BY genx:test_ident DO NOT EDIT
	// package demo
	//
	// import (
	// 	"bytes"
	// 	"io"
	//
	// 	"github.com/xoctopus/genx/internal/dumper"
	// )
	//
	// string
	// bytes.Reader
	// bytes.Reader
	// *bytes.Buffer
	// io.Reader
	// dumper.Import
	// float64
	// int32
}

func ExampleExpose() {
	ctx := dumper.WithTrackerContext(context.Background(), "demo")

	body := Snippets(
		NewLine(1),
		// imported: project
		Expose(ctx, "github.com/xoctopus/genx/testdata", "FuncT", IdentFor[string](ctx)),
		Expose(ctx, "github.com/xoctopus/genx/testdata", "DEMO_ENUM_A"),
		Expose(ctx, "github.com/xoctopus/genx/testdata", "Var"),
		Expose(ctx, "github.com/xoctopus/genx/testdata", "VarFuncT"),
		// imported: std
		Expose(ctx, "fmt", "Sscanf"),
		Expose(ctx, "io", "ReadAll"),
		// imported: general
		Expose(ctx, "github.com/pkg/errors", "New"),
		Expose(ctx, "github.com/xoctopus/x/ptrx", "Ptr", IdentFor[errors.StackTrace](ctx)),
	)

	Print(
		ctx,
		Poster("demo", "genx:test_ident"),
		Imports(ctx, "github.com/xoctopus/genx"),
		body,
	)

	// Output:
	// // Package demo GENERATED BY genx:test_ident DO NOT EDIT
	// package demo
	//
	// import (
	// 	"fmt"
	// 	"io"
	//
	// 	"github.com/pkg/errors"
	// 	"github.com/xoctopus/x/ptrx"
	//
	// 	"github.com/xoctopus/genx/testdata"
	// )
	//
	// testdata.FuncT[string]
	// testdata.DEMO_ENUM_A
	// testdata.Var
	// testdata.VarFuncT
	// fmt.Sscanf
	// io.ReadAll
	// errors.New
	// ptrx.Ptr[errors.StackTrace]
}

//go:embed testdata/enumx.go.tpl
var template []byte

func ExampleTemplate() {
	ctx := dumper.WithTrackerContext(context.Background(), "github.com/xoctopus/genx/testdata")

	tpl := Template(
		bytes.NewReader(template),
		ArgFor[enumx.Enum[testdata.Gender]](ctx, "AssertEnum"),
		ArgFor[testdata.Gender](ctx, "Type"),
		ArgExpose(ctx, "fmt", "Sprintf"),
		Arg(ctx, "NameToValueCases", Snippets(
			NewLine(1),
			Compose(Indent(1), Block(`case "MALE":`)),
			Compose(Indent(2), Block(`return GENDER__MALE, nil`)),
			Compose(Indent(1), Block(`case "FEMALE":`)),
			Compose(Indent(2), Block(`return GENDER__FEMALE, nil`)),
		)),
		ArgExpose(ctx, "github.com/xoctopus/genx/testdata", "GENDER_UNKNOWN").
			WithName("UnknownValue"),
		Arg(ctx, "Values", Snippets(
			NewLine(1),
			Compose(Indent(2), Expose(ctx, "github.com/xoctopus/genx/testdata", "GENDER__MALE"), Block(",")),
			Compose(Indent(2), Expose(ctx, "github.com/xoctopus/genx/testdata", "GENDER__FEMALE"), Block(",")),
		)),
		ArgExpose(ctx, "github.com/xoctopus/enumx", "ParseErrorFor", IdentFor[testdata.Gender](ctx)),
		ArgExpose(ctx, "github.com/xoctopus/enumx", "Scan"),
		ArgExpose(ctx, "bytes", "ToUpper"),
		ArgExpose(ctx, "fmt", "Sscanf"),
		ArgT[enumx.DriverValueOffset](ctx),
		ArgT[driver.Value](ctx),
		Arg(ctx, "ValueToDescCases", Snippets(
			NewLine(1),
			Compose(Indent(1), Block(`case GENDER__MALE:`)),
			Compose(Indent(2), Block(`return "男"`)),
			Compose(Indent(1), Block(`case GENDER__FEMALE:`)),
			Compose(Indent(2), Block(`return "女"`)),
		)),
		Arg(ctx, "ValueToNameCases", Snippets(
			NewLine(1),
			Compose(Indent(1), Block(`case GENDER__MALE:`)),
			Compose(Indent(2), Block(`return "MALE"`)),
			Compose(Indent(1), Block("case GENDER__FEMALE:")),
			Compose(Indent(2), Block(`return "FEMALE"`)),
		)),
		nil,
		Arg(ctx, "Nil", nil),
	)

	b := bytes.NewBuffer(nil)

	Write(
		ctx,
		b,
		Poster("testdata", "genx:test_template"),
		Imports(ctx, "github.com/xoctopus/genx"),
		tpl,
	)

	cwd, _ := os.Getwd()
	output, _ := os.OpenFile(
		filepath.Join(cwd, "..", "testdata", "gender_genx_tpl_test_enum.go"),
		os.O_WRONLY|os.O_CREATE,
		0644,
	)
	_, _ = io.Copy(output, b)
	_ = output.Sync()
	_ = output.Close()

	// Output:
}

func ExampleValue() {
	ctx := dumper.WithTrackerContext(context.Background(), "github.com/xoctopus/genx/snippet_test")

	body := Snippets(
		NewLine(1),
		Value(ctx, 1),
		Value(ctx, int8(1)),
		Value(ctx, uintptr(100)),
		Value(ctx, 1.1),
		Value(ctx, float32(1.1)),
		Value(ctx, "10"),
		Value(ctx, testdata.String("10")),
		Value(ctx, func() {}),
		Value(ctx, testdata.Gender(1)),
		Value(ctx, testdata.Struct{
			A: 100,
			B: &testdata.Struct{A: 101},
		}),
		Value(ctx, struct {
			X int `json:"x,omitzero"`
		}{0}),
		Value(ctx, map[int]int{1: 1, 2: 2, 3: 3, 4: 4, 5: 5}),
		Value(ctx, map[any]int{
			nil:                  0,
			(*int)(nil):          1,
			"1":                  2,
			"3":                  3,
			"5":                  4,
			testdata.String("2"): 5,
			testdata.String("4"): 6,
			testdata.String("6"): 7,
		}),
		Value(ctx, []map[any]any{{
			testdata.String("0"):           3, // snippet_test.String  3
			"1":                            2, // string               2
			2:                              0, // int                  0
			ptrx.Ptr(testdata.String("3")): 1, // pointer              1
		}}),
		Value(ctx, []any{nil, true, false, complex64(1), complex128(1)}),
	)

	x := map[any]int{
		"1":                  1,
		testdata.String("2"): 4,
		"3":                  2,
		testdata.String("4"): 5,
		"5":                  3,
		testdata.String("6"): 6,
	}
	reflect.ValueOf(x)

	Print(
		ctx,
		Poster("demo", "genx:test_value"),
		Imports(ctx, "github.com/xoctopus/genx"),
		body,
	)

	// Output:
	// // Package demo GENERATED BY genx:test_value DO NOT EDIT
	// package demo
	//
	// import (
	// 	"github.com/xoctopus/x/ptrx"
	//
	// 	"github.com/xoctopus/genx/testdata"
	// )
	//
	// 1
	// 1
	// 100
	// 1.1
	// 1.1
	// "10"
	// testdata.String("10")
	// testdata.Gender(1)
	// testdata.Struct{A: 100, B: ptrx.Ptr[testdata.Struct](testdata.Struct{A: 101, B: nil})}
	// struct { X int "json:\"x,omitzero\"" }{X: 0}
	// map[int]int{1: 1, 2: 2, 3: 3, 4: 4, 5: 5}
	// map[interface {}]int{nil: 0, nil: 1, "1": 2, "3": 3, "5": 4, testdata.String("2"): 5, testdata.String("4"): 6, testdata.String("6"): 7}
	// []map[interface {}]interface {}{map[interface {}]interface {}{2: 0, ptrx.Ptr[testdata.String](testdata.String("3")): 1, "1": 2, testdata.String("0"): 3}}
	// []interface {}{nil, true, false, (1+0i), (1+0i)}
}
