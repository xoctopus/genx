// Package testdata GENERATED BY code_error DO NOT EDIT
package testdata

import (
	"fmt"

	"github.com/pkg/errors"
)

var codeMessages = map[Code]string{
	CODE_UNDEFINED: "[testdata.Code:0] undefined",
	CODE__ERROR1:   "[testdata.Code:1] error1 message",
	CODE__ERROR2:   "[testdata.Code:2] error2 message",
	CODE__ERROR3:   "[testdata.Code:3] ERROR3",
}

func NewCodeError(code Code) error {
	return errors.WithStack(&CodeError{
		code: code,
		msg:  codeMessages[code],
	})
}

func NewCodeErrorf(code Code, format string, args ...any) error {
	return errors.WithStack(&CodeError{
		code: code,
		msg:  fmt.Sprintf(codeMessages[code]+" "+format, args...),
	})
}

func NewCodeErrorWrap(code Code, cause error) error {
	if cause == nil {
		return nil
	}
	return errors.WithStack(&CodeError{
		code: code,
		msg:  fmt.Sprintf(codeMessages[code]+" [cause: %+v]", cause),
	})
}

func NewCodeErrorWrapf(code Code, cause error, format string, args ...any) error {
	if cause == nil {
		return nil
	}
	return errors.WithStack(&CodeError{
		code: code,
		msg: fmt.Sprintf(
			codeMessages[code]+" [cause: %+v] "+format,
			append([]any{cause}, args...)...,
		),
	})
}

type CodeError struct {
	code Code
	msg  string
}

func (e *CodeError) Error() string {
	return e.msg
}

func (e *CodeError) Code() Code {
	return e.code
}

func (e *CodeError) Is(err error) bool {
	var target *CodeError
	return errors.As(err, &target) && target.code == e.code
}
