// Package testdata GENERATED BY genx:test_template DO NOT EDIT
package testdata

import (
	"bytes"
	"database/sql/driver"
	"fmt"

	"github.com/pkg/errors"
	"github.com/xoctopus/enumx"
)

// ParseGender parse Gender from key
func ParseGender(key string) (Gender, error) {
	switch key {
	case "MALE":
		return GENDER__MALE, nil
	case "FEMALE":
		return GENDER__FEMALE, nil
	default:
		var v Gender
		if _, err := fmt.Sscanf(key, "UNKNOWN_%d", &v); err != nil {
			return v, nil
		}
		return GENDER_UNKNOWN, errors.New("failed to parse #macro in string will be ignored#  ")
	}
}

// Values returns enum value list of Gender
func (Gender) Values() []Gender {
	return []Gender{
		GENDER__MALE,
		GENDER__FEMALE,
	}
}

// String returns v's string as key
func (v Gender) String() string {
	switch v {
	case GENDER__MALE:
		return "MALE"
	case GENDER__FEMALE:
		return "FEMALE"
	default:
		return fmt.Sprintf("UNKNOWN_%d", v)
	}
}

// Text returns the description as for human reading
func (v Gender) Text() string {
	switch v {
	case GENDER__MALE:
		return "男"
	case GENDER__FEMALE:
		return "女"
	default:
		return v.String()
	}
}

// IsZero checks if v is zero
func (v Gender) IsZero() bool {
	return v == GENDER_UNKNOWN
}

// MarshalText implements encoding.TextMarshaler
func (v Gender) MarshalText() ([]byte, error) {
	return []byte(v.String()), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (v *Gender) UnmarshalText(data []byte) error {
	vv, err := ParseGender(string(bytes.ToUpper(data)))
	if err != nil {
		return err
	}
	*v = vv
	return nil
}

// Value implements driver.Valuer
func (v Gender) Value() (driver.Value, error) {
	offset := 0
	if drv, ok := any(v).(enumx.DriverValueOffset); ok {
		offset = drv.Offset()
	}
	return int64(v) + int64(offset), nil
}

// Scan implements sql.Scanner
func (v *Gender) Scan(src any) error {
	offset := 0
	if offsetter, ok := any(v).(interface{ Offset() int }); ok {
		offset = offsetter.Offset()
	}
	i, err := enumx.Scan(src, offset)
	if err != nil {
		return err
	}
	*v = Gender(i)
	return nil
}
